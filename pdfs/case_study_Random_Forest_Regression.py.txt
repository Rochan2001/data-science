# -*- coding: utf-8 -*-
"""
Created on Wed Oct  2 22:27:13 2019

@author: Ammu
"""

import pandas as pd
import seaborn as sns
data_cars=pd.read_csv("cars_sampled.csv")
print(data_cars)
cars_data=data_cars.copy()
print(cars_data.info())
print(cars_data.describe())

#formating float data
pd.set_option("display.float_format",lambda x:"%.3f"%x)
print(cars_data.describe())

pd.set_option("display.max_columns",500)
print(cars_data.describe())

#Dropping unwanted columns
col=["name","dateCrawled","dateCreated","postalCode",
     "lastSeen"]
cars_data=cars_data.drop(columns=col,axis=1)
print(cars_data)
#Removing duplicate records
cars_data.drop_duplicates(keep="first",inplace=True)
print(cars_data)
#Data Cleaning
print(cars_data.isnull().sum())
yearwise_count=cars_data["yearOfRegistration"].value_counts().sort_index()
print(yearwise_count)
print(sum(cars_data["yearOfRegistration"]>2018))
print(sum(cars_data["yearOfRegistration"]<1950))
"""
sns.regplot(x="yearOfRegistration",y="price",
            scatter=True,fit_reg=False,
           data=cars_data)
"""
#working range 1950-2018

#variable price
price_count=cars_data["price"].value_counts().sort_index()
#sns.distplot(cars_data["price"])
print(cars_data["price"].describe())
#sns.boxplot(y=cars_data["price"])
print(sum(cars_data["price"]>150000))
print(sum(cars_data["price"]<100))
#working range 100-150000
#variable powerPS
power_count=cars_data["powerPS"].value_counts().sort_index()
#sns.distplot(cars_data["powerPS"])
print(cars_data["powerPS"].describe())
#sns.boxplot(y=cars_data["powerPS"])
print(sum(cars_data["powerPS"]>500))
print(sum(cars_data["powerPS"]<10))
#working range 10-500
#working range of Data

cars_data=cars_data[(cars_data.yearOfRegistration<=2018)
                &(cars_data.yearOfRegistration>=1950)
                &(cars_data.price>=100)
                &(cars_data.price<=150000)
                &(cars_data.powerPS>=10)
                &(cars_data.powerPS<=500)]
print(cars_data)

#combining yearOfRegistration and monthOfRegistration
cars_data["monthOfRegistration"]/=12
#creating new variable Age by adding yearOfRegistration 
#and monthOfRegistration
cars_data["Age"]=(2018-cars_data["yearOfRegistration"])+cars_data["monthOfRegistration"]
cars_data["Age"]=round(cars_data["Age"],2)
print(cars_data["Age"].describe())

#dropping yearOfRegistration and monthOfRegistration
cars_data.drop(columns=["yearOfRegistration","monthOfRegistration"],axis=1,inplace=True)
"""
#Data visualization of Age,Price,powerPS
sns.distplot(cars_data["Age"])
sns.boxplot(cars_data["Age"])
sns.distplot(cars_data["price"])
sns.boxplot(cars_data["price"])
sns.distplot(cars_data["powerPS"])
sns.boxplot(cars_data["powerPS"])

#Age vs price
sns.regplot(x="Age",y="price",scatter=True,
            fit_reg=False,data=cars_dat"""
#powerPs vs price
"""
sns.regplot(x="powerPS",y="price",scatter=True,
            fit_reg=False,data=cars_data)"""
#variable seller
print(cars_data["seller"].value_counts())
seller_tab=pd.crosstab(index=cars_data["seller"],columns="counts",normalize=True)
#sns.countplot(x="seller",data=cars_data)
print(seller_tab)
#fewer cars have "cpmmercial => insignificant
print(cars_data["offerType"].value_counts())
offer_tab=pd.crosstab(index=cars_data["offerType"],columns="counts",normalize=True)
#sns.countplot(x="offerType",data=cars_data)
print(offer_tab)
#all cars have "offer"=> insignificant
#variable abtest
print(cars_data["abtest"].value_counts())
offer_tab=pd.crosstab(index=cars_data["abtest"],columns="counts",normalize=True)
#sns.boxplot(x="abtest",y="price",data=cars_data)
print(offer_tab)
#remove insignificant variables
col=["seller","offerType","abtest"]
cars_data=cars_data.drop(columns=col,axis=1)
cars_copy=cars_data.copy()
cars_select1=cars_data.select_dtypes(exclude=[object])
correlation=cars_select1.corr()
print(round(correlation,3))
print(cars_select1.corr().loc[:,"price"].abs().sort_values(ascending=False)[1:])
#ignoring missing values
"""
we are going to build a linear regression and random forest model
on two sets of data
1.Data obtained by omitting rows with any missing value
2.Data obtained by imputing the missing values
"""
cars_omit=cars_data.dropna(axis=0)
cars_omit=pd.get_dummies(cars_omit,drop_first=True)

#importing necessary libraries
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
#building a model with omitted data
#seperating input and output features 
x1=cars_omit.drop(["price"],axis="columns",inplace=False)
y1=cars_omit["price"]
#plotting the variable price
prices=pd.DataFrame({"1.Before":y1,"2.After":np.log(y1)})
#prices.hist()
#Transforming price as a logarithmic value
y1=np.log(y1)
#spliting data into test and train
x_train,x_test,y_train,y_test=train_test_split(x1,y1,
                                               test_size=0.3,
                                               random_state=3)
print(x_train.shape,x_test.shape)
print(y_train.shape,y_test.shape)

#finding the mean for test data value
base_pred=np.mean(y_test)
print(base_pred)
#repeat the same value till length of test data
base_pred=np.repeat(base_pred,len(y_test))

#Finding the RMSE
base_rt_sqr_err=np.sqrt(mean_squared_error(y_test,base_pred))
print(base_rt_sqr_err)

#Random forest with omitted data
rf=RandomForestRegressor(n_estimators=100,max_features="auto",
                         max_depth=100,min_samples_split=10,
                         min_samples_leaf=4,random_state=1)
#Model
model_rf1=rf.fit(x_train,y_train)

#predicting model on test data
cars_pred_rf1=rf.predict(x_test)

#Computing MSE and RMSE
rf_mse1=mean_squared_error(y_test,cars_pred_rf1)
rf_rmse1=np.sqrt(rf_mse1)
print(rf_rmse1)

#R-Squared value
r2_rf_test1=model_rf1.score(x_test,y_test)
r2_rf_train1=model_rf1.score(x_train,y_train)
print(r2_rf_test1,r2_rf_train1)